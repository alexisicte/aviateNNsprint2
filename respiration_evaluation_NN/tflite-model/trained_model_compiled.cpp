/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 28.10.2021 20:59:20

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 400;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[20];
TfLiteEvalTensor tflEvalTensors[20];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[7];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,22 } };
const TfArray<1, float> quant0_scale = { 1, { 321.0601806640625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[64] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension1 = { 1, { 64 } };
const TfArray<1, float> quant1_scale = { 1, { 0.88956767320632935, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(8) int32_t tensor_data2[2] = { 9, -9, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<1, float> quant2_scale = { 1, { 0.016061583533883095, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int32_t tensor_data3[32] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension3 = { 1, { 32 } };
const TfArray<1, float> quant3_scale = { 1, { 0.25412216782569885, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<1, float> quant4_scale = { 1, { 0.22847099602222443, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[8] = { 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension5 = { 1, { 8 } };
const TfArray<1, float> quant5_scale = { 1, { 0.352598637342453, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int32_t tensor_data6[4] = { -1, 8, 8, -7, };
const TfArray<1, int> tensor_dimension6 = { 1, { 4 } };
const TfArray<1, float> quant6_scale = { 1, { 0.016899418085813522, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[64*22] = { 
  -70, 59, -30, 87, -54, 86, 17, -17, -11, 94, 18, -36, -80, 20, 41, -43, -85, -28, 2, -41, -44, -61, 
  -6, -34, -25, 52, 0, -42, 61, -17, 61, 44, -103, 43, -21, -22, 71, -33, 0, 51, 79, 59, -41, 28, 
  6, -10, 37, -9, 77, -33, -27, 62, 4, 16, -84, -40, -35, -74, 114, 96, 42, 58, 7, 8, 40, -29, 
  -92, -21, 24, 76, -6, -25, -26, -4, -28, -84, 7, 29, 76, -55, -53, 53, 30, 91, -38, 24, -52, -64, 
  2, -95, 26, 23, 84, -58, 1, 87, 41, -32, -43, 31, -75, 94, 23, 52, -84, 77, -11, -20, 91, 16, 
  64, 75, 61, 37, -61, -22, -59, 44, -4, 5, 7, 87, 82, 66, -57, -6, 118, 67, -30, 11, 17, -55, 
  -69, -69, 49, -22, -19, -18, -8, -61, -79, -57, -58, 36, -67, -91, 12, 51, -43, -14, 38, -89, -40, -24, 
  -38, -23, -63, 79, 37, -8, 64, 17, 82, 12, -88, -79, -11, -45, -65, 14, -16, 13, -88, -56, -89, -60, 
  11, -84, -27, 54, -40, -12, -38, -49, -95, -4, -49, -63, -104, 52, -36, -78, -60, -34, -15, 14, 79, 75, 
  -32, 28, -11, 14, -75, -7, 48, 41, 9, 24, -13, 29, -112, 3, 23, -50, -89, 71, -20, -9, 84, 59, 
  -75, -44, -2, -32, -66, -59, -54, -26, 12, -26, -87, -91, 22, -3, -4, -38, 5, 36, 30, -25, -68, 82, 
  86, 57, 8, 24, -32, 39, 74, 81, 7, 63, -64, -29, 74, -21, 94, -2, 78, -31, 56, 46, 4, -88, 
  51, 28, -54, 44, -21, 55, 4, -62, 91, 8, -20, 39, 3, -49, 18, -2, 80, 33, 47, 79, -14, 41, 
  10, -82, 76, -46, -4, -56, 75, -52, 17, 52, 26, -88, -46, 79, -73, -2, 62, -16, 59, -34, -2, -42, 
  -58, 78, -24, -82, 77, -55, -18, 17, -49, -78, 66, 59, -62, -84, 56, 64, -85, 47, 5, 17, -89, 82, 
  -50, 67, 20, 88, -51, 15, -5, -8, 74, 56, -89, 11, 27, 57, 18, -31, 89, -56, -35, -15, -11, 57, 
  -74, -18, -40, -96, 75, 62, 79, 19, -83, -42, -12, -52, -51, -69, -43, 87, -82, -23, 52, -57, -25, -5, 
  -51, 0, 24, -20, -51, -17, -16, -30, -35, -43, 18, -34, -71, 46, -15, 4, -105, 55, 53, 3, 81, 59, 
  -72, -22, -28, -18, -38, -60, 54, -72, -74, 6, 79, 20, -59, 75, -25, 44, -5, 43, -90, 55, 72, 54, 
  -27, 25, -88, -20, -27, 22, -94, -19, -20, 9, 95, 23, 32, -93, 55, -42, -37, 10, -88, -49, -52, -90, 
  -17, 78, 29, 42, -36, 14, 61, -36, -33, 122, 111, 96, 72, 57, 78, 62, 61, 41, 65, -8, -5, -11, 
  34, 22, -24, 119, -12, -50, -31, 88, 70, 53, -20, -10, 94, 61, 110, -48, -2, -89, -86, -24, -50, 13, 
  -96, -42, -6, -84, -14, -28, 13, -88, -72, -9, 35, 18, -14, 62, 69, -78, 59, -64, 65, -27, -73, -46, 
  -21, -73, 70, -50, -23, -19, -25, 25, 61, -89, -76, -89, -36, 78, 19, 62, -43, -44, -10, -64, 32, 61, 
  58, 60, -36, -1, 43, -46, -7, -12, -16, -55, 58, -10, 87, -49, -22, 36, 15, 69, 11, -42, -2, 9, 
  -60, -88, -25, 5, -58, 29, 54, -42, -70, 72, 77, -17, -93, -78, 21, -13, -61, 49, 33, -55, -6, 61, 
  109, 117, 82, -53, 76, 72, -27, 53, 86, -39, 13, -7, -4, 54, 92, 70, -49, -16, -67, -64, -55, -65, 
  111, 41, -28, 9, 30, -46, 67, -69, 8, 6, -40, 88, 101, 99, 102, 16, 104, 65, 19, -14, 33, 38, 
  43, 95, -41, -23, -74, 12, -83, 69, 37, 4, 35, -50, 61, 48, 101, 81, -2, 13, -1, -34, 80, 77, 
  11, 7, 59, -51, 64, 73, -98, -85, 40, 35, -77, 76, 9, -4, -92, 60, -22, -70, -78, 72, 70, -103, 
  -64, 53, -51, -15, 96, 62, 35, 99, -36, 55, 7, 38, 64, 6, 78, -73, 58, -52, 78, 23, -37, -62, 
  70, 8, -64, -51, -32, 84, 41, -79, -23, -82, -30, -16, 10, 60, 73, 25, 52, 12, -66, 32, 57, -88, 
  61, -11, -79, 0, -96, -12, -47, -55, 41, -34, 75, -12, 57, -29, 70, 38, -23, 8, 26, -47, 57, 0, 
  10, 75, -88, -64, -7, -36, -98, 21, -49, -83, 33, 74, -54, 40, 55, 75, -27, -95, 0, 77, 52, -20, 
  -98, 58, -64, -72, -16, -39, 55, -49, 8, 85, 56, 35, 77, -56, 18, 4, -62, 53, 8, 47, 2, -74, 
  88, 5, 11, -67, -57, 40, -32, -15, 32, -80, 56, 75, -11, -63, -109, 64, -54, 50, -53, 64, 46, 13, 
  69, -1, 6, 80, 70, 43, -97, -12, 19, 59, 55, 54, 32, 54, 45, 15, 74, 48, 27, 31, -32, -72, 
  20, 116, 13, -4, 20, 9, -36, -62, -55, -89, 25, 62, 24, 64, -25, -58, -23, 34, 26, 93, -26, -21, 
  -16, 8, -41, 64, 14, -45, -10, 29, 60, 22, 17, -7, 59, 88, 45, 14, -96, -47, 94, -13, 42, 92, 
  41, 12, 73, 63, 91, -105, -62, -14, 78, -84, 51, -18, -4, -84, -102, -94, 68, 1, 45, -66, 80, 36, 
  -51, 99, 44, -32, -55, 80, -32, -41, 29, 7, 29, 51, 62, 74, 62, 49, -36, -77, 37, -23, 45, -91, 
  -6, 38, 41, 87, -24, 88, -96, 66, 8, 48, -94, 18, -61, -35, 60, 50, -16, -81, -48, 53, 27, -76, 
  -74, 25, 13, -20, -40, 72, -11, -43, -13, 53, -64, 65, -42, -84, -74, 87, -41, 13, 73, 93, -45, -14, 
  -46, 125, 102, 81, 104, 126, -47, 90, 42, -88, -22, 30, -1, -1, 23, 89, 124, 87, -74, 25, -30, -57, 
  -55, 45, -12, -75, 94, 23, -25, -77, 13, -82, -46, 12, -20, -68, 46, 42, -65, 68, -39, -23, 18, -93, 
  -25, -11, 23, 31, -47, 63, -66, -96, 86, 81, -29, 65, -35, 68, -14, -22, 93, 13, -81, 51, 54, 40, 
  -7, -14, 13, -43, -73, 50, 10, 55, -23, 66, -36, 10, 19, -39, -4, 33, 26, -36, 24, 32, 26, -52, 
  -68, 70, -18, 48, -51, -25, -41, -44, 87, 71, 12, 46, 56, 36, -93, 85, 63, -11, -32, 62, 40, 47, 
  62, 5, 15, -35, 25, 98, 9, 79, -14, -23, 91, 22, 55, -46, 99, -62, -42, -46, 34, -29, -63, -46, 
  -4, -44, -67, -43, 6, 46, -47, 75, -53, 84, -18, -63, -96, -85, 34, -31, -51, -17, 78, 4, 81, 78, 
  -84, -16, -21, -54, 30, -14, 45, -59, -13, -28, 83, 10, -18, -21, 97, 88, 58, 15, 32, -30, 75, -87, 
  -11, 68, 78, -1, -19, 60, -48, 63, 68, 77, 66, 55, -88, -74, 58, -28, 21, 75, -88, 68, 68, -27, 
  19, 17, 16, 10, -53, -77, -81, -58, 85, 30, -85, -33, 107, -90, 63, -29, 37, -20, -72, 90, 77, 86, 
  -28, -34, 61, 92, -40, 32, -27, -54, 51, 27, 64, 15, 22, -29, -5, -62, 92, 91, -20, -62, 30, 17, 
  93, 18, 8, -110, -69, -67, -82, 81, 29, -13, 78, -10, -36, -12, 41, -68, -69, 27, 41, -75, 58, 56, 
  -14, 15, 96, -50, 55, 76, 65, 96, 46, 46, 69, -33, 0, -52, 16, 0, -11, 14, -12, 13, -46, -49, 
  83, -43, 55, 44, -63, -41, 115, -32, 99, -21, 28, 40, -40, -14, -4, 99, 52, -57, -15, -7, -13, 79, 
  -47, 106, -37, -1, 64, -9, -35, 68, 108, 127, -57, 108, 68, 69, 37, 4, 127, 2, -24, 9, -4, -68, 
  74, -87, 49, 35, -16, -62, -49, -1, 37, -6, 34, -52, 8, 25, -79, 3, 77, 37, -57, -30, -76, 62, 
  66, -56, -73, 20, -70, 37, 95, -83, -62, -80, 29, -71, -76, -82, 97, 80, -78, 81, -28, -38, 85, 43, 
  -9, -104, -93, -99, 22, -85, -57, 76, 62, -23, -47, -82, -109, -21, 34, 60, 38, 20, -74, 80, 41, -40, 
  -45, 0, -26, 24, -35, 19, -26, -71, 84, 20, 85, 90, -64, -56, 61, 91, -40, -39, 1, 77, -58, -87, 
  36, 19, 61, -87, 62, -101, 83, 26, -42, 37, 31, 8, -6, -35, 33, -3, -99, 78, -92, -75, 9, -84, 
  76, 49, 125, -1, 70, 93, -52, -39, 34, -37, 102, 70, 9, -9, 102, -17, 75, 73, 64, -59, -73, -69, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 64,22 } };
const TfArray<1, float> quant7_scale = { 1, { 0.002770719351246953, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int8_t tensor_data8[32*64] = { 
  -62, -50, -20, 80, 100, -74, -31, 37, 71, 89, 40, 72, 87, -58, 2, -56, 3, 102, -30, -52, -96, -87, 71, 44, 20, -74, 34, 26, 49, -42, -8, -87, -75, -69, -45, 37, -78, 68, -25, -41, 57, 33, 18, -90, 53, 49, -64, -59, 57, -31, 70, 64, -42, -63, -60, 51, -16, -72, 100, 27, 52, -7, 25, 18, 
  -63, -77, 3, 61, -81, -40, -66, -17, 60, 30, 65, -63, 95, -11, 53, 17, -50, 100, 23, -69, -34, 101, -20, 79, 93, 64, -97, -62, -37, -33, 15, -66, -54, 12, 66, 92, -18, 43, 32, 76, 86, -85, 66, 73, 24, 52, -78, -50, -92, -9, 38, 13, 30, 7, 51, 49, 1, -43, -53, 32, -13, 88, 30, -69, 
  -76, -69, 15, -71, 81, -18, 19, -73, -25, -38, 15, 46, 66, 90, 46, -1, 60, -54, 38, -40, 47, 64, -3, -77, 8, 79, 28, 56, 42, -12, 35, -14, 28, 67, -64, 42, -36, -58, 91, -92, 57, 2, -77, -50, 41, 70, 51, 83, -57, -22, 4, -46, 94, -94, 10, -73, 61, -109, -14, 3, 99, 55, 14, -20, 
  -64, 4, -34, -38, -35, 15, 64, 77, -6, 44, -44, 67, -6, -34, 77, -9, 12, 88, -34, 31, -44, -39, -1, -7, -102, 55, -81, -85, -99, 66, -56, 81, -63, 40, -10, 66, 23, -88, -57, 51, -50, 90, 89, -39, -53, 8, 63, -13, 11, 53, -80, 35, -24, -58, -39, -29, -26, 31, 74, 12, -73, -91, -70, -96, 
  14, 63, 53, -35, -93, 13, -44, 32, 85, 80, -44, -74, -42, -92, -57, -86, -67, -1, 57, -91, -46, -27, -93, -16, 9, 19, -99, -76, 25, -97, -87, -40, -21, 82, 73, -39, -96, -84, 37, 1, -21, 57, 45, 64, -83, 65, -18, -34, -92, 63, -78, -43, -22, 53, -8, -106, -12, 42, -49, -40, 90, -27, 82, -23, 
  59, -96, 66, 15, -65, -87, 43, -69, -32, 38, 59, -74, -86, 46, -97, -12, -12, 6, 32, -45, -62, -4, -44, 96, -64, 7, -51, -100, -10, 9, 71, 67, -84, 53, 19, 66, -32, 14, 54, -68, -24, -77, -21, 39, 2, -11, 13, -43, 29, 15, 37, -60, 53, 85, 52, -57, -36, -15, -98, -63, -37, -44, 16, -95, 
  77, 51, 19, -57, 36, 41, -2, -17, -50, -2, 57, -4, 28, -4, -99, 14, 90, -61, -1, 93, -77, -13, -27, 23, -13, 18, 56, -27, 49, -71, -99, -28, 27, -61, 69, 17, -90, 108, 4, -1, -60, -62, 64, 88, -25, 104, 66, -85, -31, 30, 15, 61, 28, 92, 28, 3, -70, 32, -65, -60, 55, -87, -51, 52, 
  -53, 73, -44, 72, 44, -57, 89, 63, -90, -61, 55, -48, 40, -69, 80, 4, -33, 97, 28, 14, 49, -56, 87, 13, 64, 95, 48, -74, -80, -14, -75, -41, 52, 94, -7, -21, -26, 81, -33, 15, -22, -67, 69, -73, 43, -86, 30, 8, 17, -91, 47, -89, -27, -43, -81, 67, -7, -88, 28, -79, 89, 4, 24, 28, 
  -66, 82, -47, 1, -6, -88, 73, 56, 6, 55, -13, 77, -37, -67, 59, 21, 77, 15, 62, -33, -52, -37, -61, 53, 6, -67, -102, 41, -40, 17, -83, -83, -30, -76, -76, -45, 32, 26, -56, -37, 59, 50, -2, 29, 85, 81, -74, 69, -11, -73, -53, 2, -85, -30, 66, -104, -55, 47, 76, -67, -69, -61, 32, 25, 
  -26, 29, 70, -96, -8, 93, 36, 91, -80, 77, 22, 48, -68, 42, 80, -27, 13, 7, -27, 46, -14, -25, 61, -102, 6, 18, -41, 37, -74, -97, 84, 37, 76, -101, 17, 7, -6, 65, -42, -58, -28, 49, 72, 41, 64, 62, -66, -78, -30, 69, 87, 15, 49, -64, 49, -32, -89, -43, 4, 83, -92, 29, -52, 10, 
  -3, 56, -14, -46, 88, 7, 94, 96, -3, -18, -41, 83, 45, 60, -62, -63, 27, -57, -12, -99, -89, 67, 34, -19, -12, -72, 44, 2, 36, 62, -84, -17, 27, 74, -76, -76, 11, 48, -78, -35, 90, 4, 25, 95, -41, 72, 51, -40, 47, 20, 30, -69, 36, -79, -52, -7, 82, 99, -78, 77, 26, -44, -85, 98, 
  14, -17, -27, 58, -37, 58, -53, 10, 40, -97, 91, 72, -36, -51, 18, 12, -58, 89, -25, 32, 40, -30, 6, 30, -91, -25, 53, 4, -71, -7, -41, -63, -83, 47, 58, 69, 64, -34, -16, -89, 40, 52, -9, -107, -35, 88, 18, 94, 100, -83, -62, 86, 68, -73, -95, -32, 15, -114, 27, 63, -22, -57, 48, -102, 
  67, -99, 45, 40, -29, 95, 59, 61, 0, -54, -17, 5, -82, 8, 41, -24, 54, 54, 19, -84, 96, -100, 4, -86, -39, 94, -8, -30, -22, -29, -57, -66, -44, -32, -49, -74, 99, 22, -54, -42, 32, -24, -85, -16, -54, -99, -24, 71, -45, 22, 9, -6, 10, 75, 96, 67, 68, -11, 93, -73, -12, -77, 95, -52, 
  -18, -60, -72, -17, -64, 41, 61, -79, -24, -48, -5, 74, 68, 62, 20, 90, -44, 52, -5, -41, 126, 26, -32, 91, 35, -8, -30, 109, 41, -34, 91, 69, -85, 70, 66, -5, -41, -26, 62, 14, -72, -41, 75, -83, -75, 58, 58, 27, 46, 40, -25, -35, 3, 79, -24, 66, 56, 99, 20, -91, -65, 64, 71, -67, 
  6, 57, -98, -54, 26, -91, 85, -4, -51, 54, -4, -1, -87, 83, 30, 58, -82, 34, -53, 27, 54, -87, -55, 54, 53, -8, -18, -20, 55, 85, 52, -79, 54, 84, 69, 1, -14, 35, -31, -51, 67, -43, 51, -81, 33, 23, -14, -100, 60, -5, 72, 36, 56, 88, -61, 79, -80, 91, 27, 45, -25, -55, 29, 85, 
  79, -21, -51, -76, -21, -6, 72, 87, 68, 41, -38, -60, -2, 19, -60, 14, 0, -39, -34, 24, 12, 22, -24, 76, -82, 5, 18, -99, 84, 94, 28, -30, 57, -57, -22, 76, 85, 1, 62, -32, -90, 18, 13, 40, 98, -40, -55, -51, -87, 45, -63, -74, 48, 51, 35, 56, 56, 61, -87, 78, 40, 15, 85, -39, 
  -30, 86, -83, -46, -18, -24, -94, -51, -66, 64, 78, 6, -33, 76, -47, 74, 4, 5, -48, -92, 27, 33, 60, 28, -7, 84, -83, 65, 5, -3, -64, -75, -4, 13, 34, 90, 62, 57, -23, 45, -63, 6, 58, 31, -79, -90, -57, 11, -51, 88, -26, -99, -20, -38, -56, 55, 65, 38, 75, -12, 14, 34, 74, -85, 
  87, -71, -32, 38, -46, 19, 35, -16, 86, 90, -28, 21, -91, 72, 31, 28, 55, 5, -7, -56, -23, -18, -65, 95, -18, 67, -2, -52, 63, -12, -88, 28, 35, 53, -44, -8, 57, -40, 83, -3, 94, -53, -47, 68, 33, -28, -95, -12, 3, -61, -15, -74, 31, -53, 67, -22, -45, 64, 27, 12, -50, -21, 10, -57, 
  63, -51, 85, -95, 2, 95, -49, 59, -67, -74, 26, 18, 71, 100, 87, -59, -32, -12, -39, 10, -19, 80, 44, 77, 48, -42, 65, 8, 16, 48, 78, -30, 101, -36, -42, 86, -90, 6, 61, 11, 54, 71, 33, -105, -51, 89, 64, 29, 57, 12, 76, -81, -31, -23, 88, -90, -56, -46, -52, 82, 45, 78, 37, 66, 
  31, 4, 78, 92, -28, 85, 83, -7, -96, 6, 62, -49, -87, 89, -33, 92, 89, 13, -5, 12, -14, 29, -6, 15, -86, 86, 72, -102, 56, 54, -36, -38, 30, -100, 68, 76, -86, 87, -67, -77, -85, 75, 68, -51, -6, -26, -72, 84, -77, 57, 64, -33, 86, 23, -15, -17, -26, 63, 46, -25, 56, -70, 93, -15, 
  28, -4, -52, 54, -11, -27, -65, 84, -76, 92, 92, 84, 37, -3, -12, -81, -44, -61, 65, -21, -105, 76, -19, -9, -33, 26, -37, 9, 30, 53, -46, 72, 80, 0, -20, -62, -6, -75, -10, -11, 28, -63, -9, -78, 23, 56, -50, 46, -26, -51, -4, 55, 85, 48, 31, -90, 78, -78, -31, -53, -13, 77, 39, -59, 
  -49, 41, 87, 92, -82, 44, 82, -51, 1, -4, 1, 55, 59, 13, -54, 82, -11, -48, -19, -65, 120, 46, 20, 59, -98, 90, 127, -11, 93, -52, 85, -10, -1, 61, 72, -3, -54, -37, -100, -55, 57, 95, -88, 41, -12, 90, 61, -19, -41, -100, 73, 39, -60, -32, -62, 2, 98, 44, 53, -13, 65, 4, -96, -14, 
  23, 79, 37, 70, -4, -90, 95, -93, 71, -41, -62, -31, 10, -77, 18, -55, -15, 49, 0, -85, 7, -15, 39, -86, -1, -8, 113, 95, 80, -41, 98, 27, 15, 30, 26, 78, 77, -74, -67, 71, -53, -70, 58, 47, -91, -69, -86, -30, 19, -74, 43, -62, 6, 16, 12, -74, 27, -48, -3, -67, -96, 7, 60, 84, 
  -59, -22, 83, 30, -86, 23, 55, -100, -87, 7, 19, 70, 9, 46, 79, -37, 66, 46, -51, -19, -91, 86, -14, -87, 76, 21, -83, 59, 1, 77, -35, -18, 9, -97, 10, 29, -63, -51, -101, -57, -15, -49, -72, 69, -43, 27, -78, 6, 80, -16, -31, -24, -9, -58, 26, -50, -54, -78, 57, 64, -58, 58, 72, -6, 
  -52, -25, -21, 86, -30, 85, 32, 60, -74, -89, -61, 27, -83, -50, -85, 55, -48, -18, 62, 76, 62, 67, -14, 1, -9, 88, -102, 19, 59, -72, -82, -79, -7, -12, -63, -42, -54, -75, 14, 72, -61, -25, -89, 72, 76, -23, -94, -63, 32, 1, -58, -78, 44, 26, 12, -11, -11, 14, -69, -11, -63, -93, 84, -87, 
  -77, -15, 75, -21, 96, -81, 42, -56, 1, 16, -16, 24, 61, 93, 15, -60, 54, 27, 96, 5, -26, -2, 50, 46, 11, -8, 68, 82, -34, -61, -33, 90, -97, -87, 47, -55, 47, -88, 53, -90, 99, -39, -74, -46, 81, 81, 60, 23, 46, 60, -77, -25, 16, 29, -47, -66, 59, 40, -39, 53, -60, -70, 39, 55, 
  11, 3, -83, 28, 25, 43, 32, -87, 4, -89, -30, -29, 91, 65, -40, 34, -97, 3, -55, 4, 96, -76, -84, 97, -52, 91, -21, 39, -55, 4, 14, -24, 29, -71, -79, -69, -59, 52, -9, -2, 1, -62, 55, -111, -35, 12, 52, 95, -49, 22, 75, 97, 73, -41, 103, -57, -84, 1, -81, -14, 56, 47, 85, -22, 
  -54, 57, -70, -1, 76, -42, -8, 97, 24, 76, -82, 27, 24, 49, 72, 14, -49, 29, 4, -76, -71, -60, 33, 25, -106, 78, 26, -91, -6, -5, -60, -37, 12, 52, 0, -41, 25, -94, -46, 17, -29, -15, -25, -29, 95, 100, 92, 68, 48, 15, 13, 14, -90, -86, 96, 25, -82, -4, 19, -55, 62, -16, 1, -43, 
  7, -28, 68, -84, -15, -6, -82, 48, 30, -59, 49, 67, 59, 40, 71, 13, -29, -105, 28, 39, 1, 34, -61, 50, -77, 7, 38, 79, -59, 6, -28, -65, 42, 44, -58, -27, 16, 29, 28, -47, 25, 18, 90, -67, 26, 25, 77, -39, 105, -106, -8, 26, 77, 71, 6, -25, 37, 122, 48, -56, -38, -23, -8, 125, 
  20, 60, -74, -77, -39, -37, 2, -75, -95, 51, 38, -48, -28, 1, -4, 48, 41, -91, 73, 39, -122, -66, -7, 16, 26, -23, 28, 0, -29, -39, -10, -80, 13, -29, 35, 42, -57, 87, 14, 3, -75, -10, -92, 7, -10, -15, 32, 88, -49, -22, 66, 64, 30, 28, -15, -101, -95, -41, -75, -9, 24, -48, 91, 9, 
  17, 32, 88, -96, 39, 6, -4, -44, 72, -75, 39, -18, -11, -55, -56, 0, 83, -41, -75, 70, 96, 73, -97, -12, 18, 81, -37, 57, 80, -37, -78, 88, 5, -38, 15, -71, 36, 44, -81, -9, -65, 91, 22, 70, 31, 13, 16, -43, 94, -76, -85, -22, 53, 9, -52, 29, 69, 20, 83, 7, 81, 84, 64, 103, 
  38, 69, -82, -16, 31, -71, 63, 0, -54, -66, 45, 34, 32, -91, -35, -25, 40, -45, 70, 98, -43, -51, 83, 43, -12, 26, -29, 53, 78, -25, 10, -33, -15, -4, 70, 98, -96, 23, -1, 98, 46, 46, 39, 36, -20, -22, -88, 69, -48, -21, -89, -79, 68, -62, 47, 15, 41, -41, -19, -23, -66, 71, 3, -108, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 32,64 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0024792691692709923, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*32] = { 
  -46, -10, 11, -80, 67, -93, 20, 70, -4, -56, -58, -6, 64, 16, 84, 25, 23, 74, -96, 24, -30, -106, 53, -95, -112, 54, 112, -106, 81, 18, -15, -120, 
  93, 45, 86, -87, -75, -40, 81, 11, -64, 44, -43, -96, 10, 111, -26, 84, -36, 119, 127, 118, 30, -94, 60, -124, 115, 116, 68, -86, 0, 9, -92, 123, 
  -122, 48, 37, -117, 90, 21, -106, -124, -12, -113, 8, -76, 57, 38, 0, -65, -83, -37, -112, -42, 5, -62, 49, 83, -63, -40, -112, -11, -107, 125, -37, 82, 
  -119, -10, -123, 47, -65, 73, 112, -47, 75, -82, 36, -90, 80, -9, -86, 71, 70, 30, -14, 92, 82, -91, 62, 84, 70, -52, 17, 66, 93, 30, 71, 71, 
  -11, -28, 32, 102, -74, -17, 104, 79, 12, -111, 30, -105, 106, 7, -52, -1, 20, 104, 95, 28, 49, 27, -42, -42, -59, -65, 101, 11, 86, -77, -23, 1, 
  -18, 31, 106, 113, 89, 67, -31, 58, -55, 13, 107, 86, 95, -16, 69, 33, 18, 25, -2, 100, 95, 105, 52, 54, -43, 99, 15, -73, 8, 54, 90, 54, 
  -119, 38, -101, -94, -111, 36, 12, 52, -117, 48, -61, -66, 18, 54, 53, 90, 39, 11, 48, 105, 27, -12, 2, 24, -64, 11, 59, -104, -9, -44, 40, -70, 
  95, -13, 104, 6, 0, 121, 82, -62, -124, -42, -47, -113, 3, -42, -78, 7, 83, 48, 108, -72, 42, -64, 88, 57, -62, 56, -105, 19, 113, -37, 97, -70, 
  8, -88, 45, 113, 24, -87, 105, 24, 88, -30, -95, -106, -4, -63, -89, 7, 77, 68, -3, -12, -44, -95, -77, -102, 74, -51, -100, -48, 112, -13, -15, -29, 
  95, 78, -103, -89, -12, 12, -97, -25, -108, -42, 14, 53, -5, -93, -2, -53, -6, -70, 110, 81, 108, -96, -107, 75, 96, 107, 39, 116, 100, 41, -92, 44, 
  -93, 13, 106, 80, -126, -93, 76, -65, -106, 74, -29, 26, -116, 19, -115, 35, -11, 47, 4, 22, -79, 73, -39, -7, 53, -11, -26, 69, 78, -81, 64, 47, 
  67, -15, -76, -24, -14, -33, -82, -116, -3, -22, -50, 32, 106, -82, -79, -115, -59, 73, -65, -71, 35, 11, -25, 52, -122, 12, -99, -116, 77, -107, -50, -32, 
  41, 4, -33, -7, 102, 114, -83, 7, 3, -40, 51, -26, 118, -87, -53, 106, 56, 29, -83, 116, -111, 109, 106, 19, 74, -105, -37, 27, 6, 65, -52, 38, 
  51, -65, -55, 37, -30, -33, 26, 7, 97, -73, 93, 37, 53, 111, 42, -63, -76, -41, 57, -38, 89, 82, 15, -93, -49, 104, 38, -127, 25, 71, -105, -9, 
  84, -16, 36, 113, 65, 22, 27, 86, 109, -77, -78, 116, -53, -49, -48, 98, 111, 69, 58, -67, 102, -61, -32, 57, 19, 30, 86, 121, -15, 103, -87, -20, 
  -4, -109, -70, 39, -107, 42, 93, -13, -24, 31, 18, -107, 35, 52, 121, -109, -38, -65, -121, -113, 44, -45, 44, -59, -67, 80, -53, -118, -67, 23, 79, -35, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 16,32 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0028437641449272633, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int8_t tensor_data10[8*16] = { 
  29, -110, -30, 83, 90, -115, -26, 105, -22, -50, 96, -78, 116, -93, 34, -97, 
  -43, 5, -114, 43, 14, -80, -88, -112, 85, -74, -80, -65, -69, 16, -77, 35, 
  -68, -112, 11, -109, 24, 64, -25, -50, -35, -45, -102, -16, 102, 10, -51, 71, 
  42, 30, 65, -53, -71, -104, -99, -103, 27, 95, 70, -82, -56, -83, -74, -19, 
  74, -72, -120, 94, -69, 54, 111, -78, -3, 41, -36, -104, 15, 44, -127, 26, 
  -96, -88, -119, 56, -3, 13, -69, 90, 114, 18, -108, 9, 95, -93, 45, -58, 
  -45, -107, -118, -15, -63, -8, 36, 112, 31, -4, 36, 70, 83, 77, -114, -101, 
  91, -110, 19, -48, -100, 56, -116, -106, -6, -4, -20, -7, -98, 21, 26, -47, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 8,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0041119838133454323, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[4*8] = { 
  -106, 47, 98, -51, 25, -82, 53, -106, 
  -107, -2, 86, 17, 127, -103, 122, 4, 
  120, -109, 93, 37, -117, -32, 127, 31, 
  -112, 84, -29, -60, -91, 125, -44, 25, 
};
const TfArray<2, int> tensor_dimension11 = { 2, { 4,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0051996279507875443, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int8_t tensor_data12[2*4] = { 
  88, 25, 20, -127, 
  89, -97, -58, -6, 
};
const TfArray<2, int> tensor_dimension12 = { 2, { 2,4 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0076211728155612946, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,64 } };
const TfArray<1, float> quant13_scale = { 1, { 102.49881744384766, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 80.341049194335938, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,16 } };
const TfArray<1, float> quant15_scale = { 1, { 85.749031066894531, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,8 } };
const TfArray<1, float> quant16_scale = { 1, { 3.2501206398010254, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<2, int> tensor_dimension17 = { 2, { 1,4 } };
const TfArray<1, float> quant17_scale = { 1, { 2.1074950695037842, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,2 } };
const TfArray<1, float> quant18_scale = { 1, { 2.0554845333099365, } };
const TfArray<1, int> quant18_zero = { 1, { 125 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,2 } };
const TfArray<1, float> quant19_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,7,1 } };
const TfArray<1, int> outputs0 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 13,8,3 } };
const TfArray<1, int> outputs1 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 14,9,4 } };
const TfArray<1, int> outputs2 = { 1, { 15 } };
const TfLiteFullyConnectedParams opdata3 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs3 = { 3, { 15,10,5 } };
const TfArray<1, int> outputs3 = { 1, { 16 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 16,11,6 } };
const TfArray<1, int> outputs4 = { 1, { 17 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 17,12,2 } };
const TfArray<1, int> outputs5 = { 1, { 18 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 18 } };
const TfArray<1, int> outputs6 = { 1, { 19 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension0, 22, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 1408, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension13, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 64, (TfLiteIntArray*)&tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension16, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension17, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension18, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension19, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 20;
  for(size_t i = 0; i < 20; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 7; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 7; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  19, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 7; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
